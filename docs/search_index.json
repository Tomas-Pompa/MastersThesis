[["aplikace-na-reálných-datech-1.html", "Kapitola 4 Aplikace na reálných datech 1", " Kapitola 4 Aplikace na reálných datech 1 Nyní se věnujme aplikaci na reálných datech. Budeme pracovat s daty dataf.growth(), které jsou dostupné v knihovně ddalpha. Nejprve si data načteme a vykreslíme. Code # nacteni dat library(fda) ## Loading required package: splines ## Loading required package: fds ## Loading required package: rainbow ## Loading required package: MASS ## Loading required package: pcaPP ## Loading required package: RCurl ## Loading required package: deSolve ## ## Attaching package: &#39;fda&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## matplot Code library(ggplot2) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following object is masked from &#39;package:MASS&#39;: ## ## select ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union Code library(tidyr) ## ## Attaching package: &#39;tidyr&#39; ## The following object is masked from &#39;package:RCurl&#39;: ## ## complete Code library(ddalpha) ## Loading required package: class ## Loading required package: robustbase ## Loading required package: sfsmisc ## ## Attaching package: &#39;sfsmisc&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## last ## Loading required package: geometry Code dataf &lt;- dataf.growth() labels &lt;- unlist(dataf$labels) Code data.gr &lt;- matrix(NA, nrow = length(dataf$dataf[[1]]$args), ncol = length(labels) + 1) Code colnames(data.gr) &lt;- c(&#39;time&#39;, paste0(labels, 1:length(labels))) data.gr &lt;- as.data.frame(data.gr) Code data.gr[, 1] &lt;- dataf$dataf[[1]]$args Code for (i in 1:length(labels)) { data.gr[, i + 1] &lt;- dataf$dataf[[i]]$vals } Code pivot_longer(data.gr, cols = girl1:boy93, names_to = &#39;sample&#39;, values_to = &#39;height&#39;, cols_vary = &#39;slowest&#39;) |&gt; mutate(Individual = as.factor(sample), Gender = factor(rep(labels, each = length(data.gr$time)), levels = c(&#39;girl&#39;, &#39;boy&#39;))) |&gt; ggplot(aes(x = time, y = height, colour = Gender, group = Individual)) + geom_line() + theme_bw() "],["vyhlazení-pozorovaných-křivek-2.html", "4.1 Vyhlazení pozorovaných křivek", " 4.1 Vyhlazení pozorovaných křivek Nyní převedeme pozorované diskrétní hodnoty (vektory hodnot) na funkcionální objekty, se kterými budeme následně pracovat. Jelikož se nejedná o periodické křivky na intervalu \\(I = [0, 1]\\), využijeme k vyhlazení B-sline bázi. Za uzly bereme celý vektor time, standardně uvažujeme kubické spliny, proto volíme (implicitní volba v R) norder = 4. Budeme penalizovat druhou derivaci funkcí. Code t &lt;- data.gr$time rangeval &lt;- range(t) breaks &lt;- t norder &lt;- 4 bbasis &lt;- create.bspline.basis(rangeval = rangeval, norder = norder, breaks = breaks) curv.Lfd &lt;- int2Lfd(2) # penalizujeme 2. derivaci Najdeme vhodnou hodnotu vyhlazovacího parametru \\(\\lambda &gt; 0\\) pomocí \\(GCV(\\lambda)\\), tedy pomocí zobecněné cross–validace. Hodnotu \\(\\lambda\\) budeme uvažovat pro obě klasifikační skupiny stejnou, neboť pro testovací pozorování bychom dopředu nevěděli, kterou hodnotu \\(\\lambda\\), v případě rozdílné volby pro každou třídu, máme volit. Code # spojeni pozorovani do jedne matice XX &lt;- data.gr[, -1] |&gt; as.matrix() lambda.vect &lt;- 10^seq(from = -7, to = 1, length.out = 25) # vektor lambd gcv &lt;- rep(NA, length = length(lambda.vect)) # prazdny vektor pro ulozebi GCV for(index in 1:length(lambda.vect)) { curv.Fdpar &lt;- fdPar(bbasis, curv.Lfd, lambda.vect[index]) BSmooth &lt;- smooth.basis(t, XX, curv.Fdpar) # vyhlazeni gcv[index] &lt;- mean(BSmooth$gcv) # prumer pres vsechny pozorovane krivky } GCV &lt;- data.frame( lambda = round(log10(lambda.vect), 3), GCV = gcv ) # najdeme hodnotu minima lambda.opt &lt;- lambda.vect[which.min(gcv)] Pro lepší znázornění si vykreslíme průběh \\(GCV(\\lambda)\\). Code GCV |&gt; ggplot(aes(x = lambda, y = GCV)) + geom_line(linetype = &#39;dashed&#39;, linewidth = 0.8) + geom_point(size = 2.5) + theme_bw() + labs(x = bquote(paste(log[10](lambda), &#39; ; &#39;, lambda[optimal] == .(round(lambda.opt, 4)))), y = expression(GCV(lambda))) + geom_point(aes(x = log10(lambda.opt), y = min(gcv)), colour = &#39;red&#39;, size = 3) Obrázek 4.1: Průběh \\(GCV(\\lambda)\\) pro zvolený vektor \\(\\boldsymbol\\lambda\\). Na ose \\(x\\) jsou hodnoty vyneseny v logaritmické škále. Červeně je znázorněna optimální hodnota vyhlazovacího parametru \\(\\lambda_{optimal}\\). S touto optimální volbou vyhlazovacího parametru \\(\\lambda\\) nyní vyhladíme všechny funkce. Code n &lt;- sum(labels == &#39;girls&#39;) curv.fdPar &lt;- fdPar(bbasis, curv.Lfd, lambda.opt) BSmooth &lt;- smooth.basis(t, XX, curv.fdPar) XXfd &lt;- BSmooth$fd fdobjSmootheval &lt;- eval.fd(fdobj = XXfd, evalarg = t) DF$Vsmooth &lt;- c(fdobjSmootheval[, c(1 : n_curves_plot, (n + 1) : (n + n_curves_plot))]) DF |&gt; ggplot(aes(x = t, y = Vsmooth, group = interaction(time, group), colour = group)) + geom_line(linewidth = 0.75) + theme_bw() + labs(x = &#39;Time&#39;, y = &#39;Function&#39;, colour = &#39;Group&#39;) + scale_colour_discrete(labels=c(&#39;Y = 0&#39;, &#39;Y = 1&#39;)) Ještě znázorněme všechny křivky včetně průměru zvlášť pro každou třídu. Code DFsmooth &lt;- data.frame( t = rep(t, 2 * n), time = rep(rep(1:n, each = length(t)), 2), Smooth = c(fdobjSmootheval), Mean = c(rep(apply(fdobjSmootheval[ , 1 : n], 1, mean), n), rep(apply(fdobjSmootheval[ , (n + 1) : (2 * n)], 1, mean), n)), group = factor(rep(c(0, 1), each = n * length(t))) ) DFmean &lt;- data.frame( t = rep(t, 2), Mean = c(apply(fdobjSmootheval[ , 1 : n], 1, mean), apply(fdobjSmootheval[ , (n + 1) : (2 * n)], 1, mean)), group = factor(rep(c(0, 1), each = length(t))) ) DFsmooth |&gt; ggplot(aes(x = t, y = Smooth, group = interaction(time, group), colour = group)) + geom_line(linewidth = 0.25) + theme_bw() + labs(x = &#39;Time&#39;, y = &#39;Function&#39;, colour = &#39;Group&#39;) + scale_colour_discrete(labels = c(&#39;Y = 0&#39;, &#39;Y = 1&#39;)) + geom_line(aes(x = t, y = Mean), colour = &#39;black&#39;, linewidth = 1, linetype = &#39;twodash&#39;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
