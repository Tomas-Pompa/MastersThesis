[["podpůrné-materiály-pro-diplomovou-práci.html", "Kapitola 13 Podpůrné materiály pro diplomovou práci 13.1 Materiály pro Kapitolu 1 13.2 Materiály pro Kapitolu 2 13.3 Materiály pro Kapitolu 3 13.4 Materiály pro Kapitolu 4 13.5 Materiály pro Kapitolu 5", " Kapitola 13 Podpůrné materiály pro diplomovou práci V této poslední kapitole jsou uvedeny zdrojové kódy pro vygenerování grafů a dalších případných materiálů, které jsou použity v diplomové práci. Jedná se především o ilustrativní grafy určitých vlastností a fenoménů spojených s funkcionálními daty. Kapitola je členěna do sekcí, které odpovídají jednotlivým kapitolám v diplomové práci. Všechny grafy jsou vytvořeny pomocí balíčku ggplot2, který poskytuje celou řadu grafických funkcionalit, pomocí kterých jsme (alespoň subjektivně) schopni dosáhnout podstatně lépe a profesionálněni vypadajících grafických výstupů v porovnání s klasickou grafikou v R. Všechny grafy jsou uloženy pomocí funkce ggsave() ve formátu pdf nebo tikz, který umožňuje lepší kombinaci grafiky a symbolů v \\(\\LaTeX\\)u. Code # nacteme potrebne balicky library(fda) library(ggplot2) library(dplyr) library(tidyr) library(ddalpha) library(tidyverse) library(patchwork) library(tikzDevice) set.seed(42) options(tz = &quot;UTC&quot;) # nacteni dat data &lt;- read.delim2(&#39;phoneme.txt&#39;, header = T, sep = &#39;,&#39;) # zmenime dve promenne na typ factor data &lt;- data |&gt; mutate(g = factor(g), speaker = factor(speaker)) # numericke promenne prevedeme opravdu na numericke data[, 2:257] &lt;- as.numeric(data[, 2:257] |&gt; as.matrix()) tr_vs_test &lt;- str_split(data$speaker, &#39;\\\\.&#39;) |&gt; unlist() tr_vs_test &lt;- tr_vs_test[seq(1, length(tr_vs_test), by = 4)] data$train &lt;- ifelse(tr_vs_test == &#39;train&#39;, TRUE, FALSE) # vybrane fonemy ke klasifikaci phoneme_subset &lt;- c(&#39;aa&#39;, &#39;ao&#39;) # testovaci a trenovaci data data_train &lt;- data |&gt; filter(train) |&gt; filter(g %in% phoneme_subset) data_test &lt;- data |&gt; filter(!train) |&gt; filter(g %in% phoneme_subset) # odstranime sloupce, ktere nenesou informaci o frekvenci a # transponujeme tak, aby ve sloupcich byly jednotlive zaznamy X_train &lt;- data_train[, -c(1, 258, 259, 260)] |&gt; t() X_test &lt;- data_test[, -c(1, 258, 259, 260)] |&gt; t() # prejmenujeme radky a sloupce rownames(X_train) &lt;- 1:256 colnames(X_train) &lt;- paste0(&#39;train&#39;, data_train$row.names) rownames(X_test) &lt;- 1:256 colnames(X_test) &lt;- paste0(&#39;test&#39;, data_test$row.names) # definujeme vektor fonemu y_train &lt;- data_train[, 258] |&gt; factor(levels = phoneme_subset) y_test &lt;- data_test[, 258] |&gt; factor(levels = phoneme_subset) y &lt;- c(y_train, y_test) 13.1 Materiály pro Kapitolu 1 V této sekci uvedeme podpůrné grafy pro první kapitolu diplomové práce. 13.1.1 Funkcionální průměr Nyní pro data phoneme spočítáme průměr. Code t &lt;- 1:256 rangeval &lt;- range(t) breaks &lt;- t norder &lt;- 4 bbasis &lt;- create.bspline.basis(rangeval = rangeval, norder = norder, breaks = breaks) curv.Lfd &lt;- int2Lfd(2) # penalizujeme 2. derivaci # spojeni pozorovani do jedne matice XX &lt;- cbind(X_train, X_test) |&gt; as.matrix() XXaa &lt;- XX[, y == phoneme_subset[1]] lambda.vect &lt;- 10^seq(from = 1, to = 3, length.out = 35) # vektor lambd gcv &lt;- rep(NA, length = length(lambda.vect)) # prazdny vektor pro ulozebi GCV for(index in 1:length(lambda.vect)) { curv.Fdpar &lt;- fdPar(bbasis, curv.Lfd, lambda.vect[index]) BSmooth &lt;- smooth.basis(t, XX, curv.Fdpar) # vyhlazeni gcv[index] &lt;- mean(BSmooth$gcv) # prumer pres vsechny pozorovane krivky } GCV &lt;- data.frame( lambda = round(log10(lambda.vect), 3), GCV = gcv ) # najdeme hodnotu minima lambda.opt &lt;- lambda.vect[which.min(gcv)] curv.fdPar &lt;- fdPar(bbasis, curv.Lfd, lambda.opt) BSmooth &lt;- smooth.basis(t, XX, curv.fdPar) XXfd &lt;- BSmooth$fd fdobjSmootheval &lt;- eval.fd(fdobj = XXfd, evalarg = t) ## pouze pro aa lambda.vect &lt;- 10^seq(from = 1, to = 3, length.out = 35) # vektor lambd gcv &lt;- rep(NA, length = length(lambda.vect)) # prazdny vektor pro ulozebi GCV for(index in 1:length(lambda.vect)) { curv.Fdpar &lt;- fdPar(bbasis, curv.Lfd, lambda.vect[index]) BSmoothaa &lt;- smooth.basis(t, XXaa, curv.Fdpar) # vyhlazeni gcv[index] &lt;- mean(BSmoothaa$gcv) # prumer pres vsechny pozorovane krivky } GCV &lt;- data.frame( lambda = round(log10(lambda.vect), 3), GCV = gcv ) # najdeme hodnotu minima lambda.opt &lt;- lambda.vect[which.min(gcv)] curv.fdPar &lt;- fdPar(bbasis, curv.Lfd, lambda.opt) BSmoothaa &lt;- smooth.basis(t, XXaa, curv.fdPar) XXfdaa &lt;- BSmoothaa$fd fdobjSmoothevalaa &lt;- eval.fd(fdobj = XXfdaa, evalarg = t) # prumer meanfd &lt;- mean.fd(XXfdaa) fdmean &lt;- eval.fd(fdobj = meanfd, evalarg = t) Code n &lt;- dim(XX)[2] DFsmooth &lt;- data.frame( t = rep(t, n), time = factor(rep(1:n, each = length(t))), Smooth = c(fdobjSmootheval), Phoneme = rep(y, each = length(t))) |&gt; filter(Phoneme == &#39;aa&#39;) DFmean &lt;- data.frame( t = rep(t, 2), Mean = c(fdmean, fdmean), Phoneme = factor(rep(phoneme_subset, each = length(t)), levels = levels(y)) ) |&gt; filter(Phoneme == &#39;aa&#39;) # tikz(file = &quot;figures/DP_kap1_mean.tex&quot;, width = 6, height = 5) DFsmooth |&gt; filter(time %in% as.character(1:100)) |&gt; ggplot(aes(x = t, y = Smooth)) + geom_line(aes(group = time), linewidth = 0.2, colour = &#39;deepskyblue2&#39;, alpha = 0.6) + theme_bw() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;log-periodogram&#39;, colour = &#39;Phoneme&#39;) + scale_colour_discrete(labels = phoneme_subset) + geom_line(data = DFmean, aes(x = t, y = Mean, group = Phoneme), linewidth = 1, linetype = &#39;solid&#39;, colour = &#39;grey2&#39;) + theme(legend.position = &#39;none&#39;) Obrázek 13.1: Vykreslení prvních 100 vyhlazených pozorovaných křivek. Černou čarou je zakreslen průměr. Code # dev.off() # ggsave(&quot;figures/DP_kap1_mean.pdf&quot;, width = 6, height = 5) 13.1.2 Variance Code varfd &lt;- var.fd(XXfdaa) fdvar &lt;- eval.bifd(t, t, varfd) Code dfs &lt;- data.frame( time = t, value = c(fdobjSmoothevalaa)) df &lt;- data.frame(dfs, fdmean = fdmean, fdvar = diag(fdvar)) # tikz(file = &quot;figures/DP_kap1_variance.tex&quot;, width = 6, height = 5) # df &lt;- df[seq(1, length(df$time), length = 1001), ] ggplot(data = df, aes(x = time, y = fdvar)) + geom_line(color = &#39;deepskyblue2&#39;, linewidth = 0.8) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Variance&#39;, colour = &#39;Phoneme&#39;) + theme_bw() Code # dev.off() # ggsave(&quot;figures/DP_kap1_variance.tex&quot;, width = 6, height = 5, device = tikz) 13.1.3 Kovariance a Korelace Code fdcor &lt;- cor.fd(t, XXfdaa) df &lt;- merge(t, t) df &lt;- data.frame(df, fdcov = c(fdvar), fdcor = c(fdcor)) df &lt;- df[seq(1, length(df$x), length = 68001), ] # tikz(file = &quot;figures/DP_kap1_cov.tex&quot;, width = 6, height = 6) p1 &lt;- ggplot(data = df, aes (x, y, z = fdcov)) + geom_raster(aes(fill = fdcov)) + geom_contour(colour = &quot;white&quot;) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Frekvence [Hz]&#39;, fill = &#39;Kovariance&#39;) + coord_fixed(ratio = 1) + theme_bw() + theme(legend.position = &#39;bottom&#39;) + scale_y_continuous(expand = c(0,0) + 0.01) + scale_x_continuous(expand = c(0,0) + 0.01) p1 Code # dev.off() # ggsave(&quot;figures/DP_kap1_cov.tex&quot;, width = 6, height = 6, device = tikz) # tikz(file = &quot;figures/DP_kap1_cor.tex&quot;, width = 6, height = 6) p2 &lt;- ggplot(data = df, aes (x, y, z = fdcor)) + geom_raster(aes(fill = fdcor)) + geom_contour(colour = &quot;white&quot;) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Frekvence [Hz]&#39;, fill = &#39;Korelace&#39;) + coord_fixed(ratio = 1) + theme_bw() + theme(legend.position = &#39;bottom&#39;) + scale_y_continuous(expand = c(0,0) + 0.01) + scale_x_continuous(expand = c(0,0) + 0.01) p2 Code # dev.off() # ggsave(&quot;figures/DP_kap1_cor.tex&quot;, width = 6, height = 6, device = tikz) 13.1.4 B-splinová báze Podívejme se na princip, jak se pomocí splinové báze dostaneme od diskrétních naměřených hodnot k funkcionálním datům. Uvažujme pro přehlednost opět data phoneme a pouze malý počet bázových funkcí. Uvedeme tři obrázky, jeden se znárorněnými bázovými funkcemi, druhý s bázovými funkcemi přenásobenými vypočtenou hodnotou parametru a třetí výslednou křivku poskládanou sečtením jednotlivých přeškálovaných bázových funkcí. 13.1.4.1 pro norder = 2 Code df &lt;- data.frame(x = 1:256, y = data[5, 2:257] |&gt; c() |&gt; unlist()) breaks &lt;- quantile(df$x, probs = seq(0.1, 0.9, by = 0.2)) norder &lt;- 2 rangeval &lt;- range(df$x) bbasis &lt;- create.bspline.basis(rangeval, norder = norder, breaks = breaks) BSmooth &lt;- smooth.basis(df$x, df$y, bbasis) Code fdBSmootheval &lt;- eval.fd(fdobj = BSmooth$fd, evalarg = df$x) fdB &lt;- eval.basis(basisobj = bbasis, evalarg = df$x) basisdf1 &lt;- data.frame(bs = c(fdB), x = df$x, basis = rep(colnames(fdB), each = length(df$x))) ebchan &lt;- fdB * matrix(rep(BSmooth$fd$coefs, each = length(df$x)), nrow = length(df$x)) basisdf2 &lt;- data.frame(bs = c(ebchan), x = df$x, basis = rep(colnames(fdB), each = length(df$x))) #tikz(file = &quot;figures/DP_kap1_Bbasis_norder2.tex&quot;, width = 12, height = 4) # samotna baze p1 &lt;- ggplot(data = basisdf1, aes(x = x, y = bs * 10, colour = basis)) + geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;B-splinová báze&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + ylim(c(0, 22)) + scale_color_brewer(palette = &#39;Blues&#39;) # prenasobena koeficienty p2 &lt;- ggplot(data = basisdf2, aes(x = x, y = bs, colour = basis)) + geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;B-splinová báze (škálovaná)&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + ylim(c(0, 22)) + scale_color_brewer() # vyhlazena data p3 &lt;- ggplot(data = df, aes(x, y)) + geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_point(colour = &#39;deepskyblue2&#39;, size = 0.8, alpha = 0.75) + geom_line(aes(y = fdBSmootheval)) + theme_classic() + #guides (colour = FALSE) + ylim(c(0, 22)) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Log-periodogram&#39;, colour = &#39;Foném&#39;) (p1 | p2 | p3) Obrázek 13.2: B-spliny. Code #dev.off() # ggsave(&#39;figures/DP_kap1_Bbasis_norder2.tex&#39;, device = tikz) 13.1.4.2 pro norder = 4 Code df &lt;- data.frame(x = 1:256, y = data[5, 2:257] |&gt; c() |&gt; unlist()) breaks &lt;- quantile(df$x, probs = seq(0.1, 0.9, by = 0.2)) norder &lt;- 4 rangeval &lt;- range(df$x) bbasis &lt;- create.bspline.basis (rangeval, norder = norder, breaks = breaks) BSmooth &lt;- smooth.basis(df$x, df$y, bbasis) Code fdBSmootheval &lt;- eval.fd(fdobj = BSmooth$fd, evalarg = df$x) fdB &lt;- eval.basis(basisobj = bbasis, evalarg = df$x) basisdf1 &lt;- data.frame(bs = c(fdB), x = df$x, basis = rep(colnames(fdB), each = length(df$x))) ebchan &lt;- fdB * matrix(rep(BSmooth$fd$coefs, each = length(df$x)), nrow = length(df$x)) basisdf2 &lt;- data.frame(bs = c(ebchan), x = df$x, basis = rep(colnames(fdB), each = length(df$x))) #tikz(file = &quot;figures/DP_kap1_Bbasis_norder4.tex&quot;, width = 12, height = 4) # samotna baze p1 &lt;- ggplot(data = basisdf1, aes(x = x, y = bs * 10, colour = basis)) + geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;B-splinová báze&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + ylim(c(0, 22)) + scale_color_brewer(palette = &#39;Blues&#39;) # prenasobena koeficienty p2 &lt;- ggplot(data = basisdf2, aes(x = x, y = bs, colour = basis)) + geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;B-splinová báze (škálovaná)&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + ylim(c(0, 22)) + scale_color_brewer() # vyhlazena data p3 &lt;- ggplot(data = df, aes(x, y)) + geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_point(colour = &#39;deepskyblue2&#39;, size = 0.8, alpha = 0.75) + geom_line(aes(y = fdBSmootheval)) + theme_classic() + #guides (colour = FALSE) + ylim(c(0, 22)) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Log-periodogram&#39;, colour = &#39;Foném&#39;) (p1 | p2 | p3) Obrázek 13.3: B-spliny. Code #dev.off() #ggsave(&#39;figures/DP_kap1_Bbasis_norder4.pdf&#39;) 13.1.5 Fourierova báze Podívejme se na princip, jak se pomocí Fourierovské báze dostaneme od diskrétních naměřených hodnot k funkcionálním datům. Uvažujme pro přehlednost opět data phoneme a pouze malý počet bázových funkcí. Uvedeme tři obrázky, jeden se znárorněnými bázovými funkcemi, druhý s bázovými funkcemi přenásobenými vypočtenou hodnotou parametru a třetí výslednou křivku poskládanou sečtením jednotlivých přeškálovaných bázových funkcí. 13.1.5.1 pro nbasis = 5 Code df &lt;- data.frame(x = 1:256, y = data[5, 2:257] |&gt; c() |&gt; unlist()) nbasis &lt;- 5 rangeval &lt;- range(df$x) fbasis &lt;- create.fourier.basis(rangeval, nbasis = nbasis, period = 256) FSmooth &lt;- smooth.basis(df$x, df$y, fbasis) Code fdBSmootheval &lt;- eval.fd(fdobj = FSmooth$fd, evalarg = df$x) fdF &lt;- eval.basis(basisobj = fbasis, evalarg = df$x) basisdf1 &lt;- data.frame(bs = c(fdF), x = df$x, basis = rep(colnames(fdF), each = length(df$x))) ebchan &lt;- fdF * matrix(rep(FSmooth$fd$coefs, each = length(df$x)), nrow = length(df$x)) basisdf2 &lt;- data.frame(bs = c(ebchan), x = df$x, basis = rep(colnames(fdF), each = length(df$x))) # tikz(file = &quot;figures/DP_kap1_Fbasis_nbasis5.tex&quot;, width = 12, height = 4) # samotna baze p1 &lt;- ggplot(data = basisdf1, aes(x = x, y = bs, colour = basis)) + # geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Fourierova báze&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + #ylim(c(0, 22)) + scale_color_brewer(palette = &#39;Blues&#39;) # prenasobena koeficienty p2 &lt;- ggplot(data = basisdf2, aes(x = x, y = bs, colour = basis)) + # geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Fourierova báze (škálovaná)&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + #ylim(c(0, 22)) + scale_color_brewer() # vyhlazena data p3 &lt;- ggplot(data = df, aes(x, y)) + # geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_point(colour = &#39;deepskyblue2&#39;, size = 0.8, alpha = 0.75) + geom_line(aes(y = fdBSmootheval)) + theme_classic() + #guides (colour = FALSE) + ylim(c(0, 22)) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Log-periodogram&#39;, colour = &#39;Foném&#39;) (p1 | p2 | p3) Obrázek 13.4: Fourierova baze. Code # dev.off() #ggsave(&#39;figures/DP_kap1_Fbasis_nbasis5.pdf&#39;) 13.1.5.2 pro nbasis = 7 Code df &lt;- data.frame(x = 1:256, y = data[5, 2:257] |&gt; c() |&gt; unlist()) nbasis &lt;- 7 rangeval &lt;- range(df$x) fbasis &lt;- create.fourier.basis(rangeval, nbasis = nbasis, period = 256) FSmooth &lt;- smooth.basis(df$x, df$y, fbasis) Code fdBSmootheval &lt;- eval.fd(fdobj = FSmooth$fd, evalarg = df$x) fdF &lt;- eval.basis(basisobj = fbasis, evalarg = df$x) basisdf1 &lt;- data.frame(bs = c(fdF), x = df$x, basis = rep(colnames(fdF), each = length(df$x))) ebchan &lt;- fdF * matrix(rep(FSmooth$fd$coefs, each = length(df$x)), nrow = length(df$x)) basisdf2 &lt;- data.frame(bs = c(ebchan), x = df$x, basis = rep(colnames(fdF), each = length(df$x))) # tikz(file = &quot;figures/DP_kap1_Fbasis_nbasis7.tex&quot;, width = 12, height = 4) # samotna baze p1 &lt;- ggplot(data = basisdf1, aes(x = x, y = bs, colour = basis)) + # geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Fourierova báze&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + #ylim(c(0, 22)) + scale_color_brewer(palette = &#39;Blues&#39;) # prenasobena koeficienty p2 &lt;- ggplot(data = basisdf2, aes(x = x, y = bs, colour = basis)) + # geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_line() + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Fourierova báze (škálovaná)&#39;, colour = &#39;Foném&#39;) + theme_classic() + guides(colour = FALSE) + #ylim(c(0, 22)) + scale_color_brewer() # vyhlazena data p3 &lt;- ggplot(data = df, aes(x, y)) + # geom_vline(xintercept = breaks, linetype = &quot;dotted&quot;, linewidth = 0.1, colour = &#39;grey&#39;) + geom_point(colour = &#39;deepskyblue2&#39;, size = 0.8, alpha = 0.75) + geom_line(aes(y = fdBSmootheval)) + theme_classic() + #guides (colour = FALSE) + ylim(c(0, 22)) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Log-periodogram&#39;, colour = &#39;Foném&#39;) (p1 | p2 | p3) Obrázek 13.5: Fourierova baze. Code # dev.off() #ggsave(&#39;figures/DP_kap1_Fbasis_nbasis7.pdf&#39;) 13.2 Materiály pro Kapitolu 2 Ve druhé sekci se podíváme na materiály pro Kapitolu 2 diplomové práce. Bude nás zajímat vliv vyhlazovacího parametru \\(\\lambda\\) na výslednou odhadnutou křivku z diskrétních dat. Dále se podíváme na funkcionální analýzu hlavních komponent. 13.2.1 Volba \\(\\lambda\\) Začněme volbou vyhlazovacího parametru \\(\\lambda &gt; 0\\). S rostoucí hodnotou \\(\\lambda\\) dáváme v penalizované sumě čtverců \\[ SS_{pen} = (\\boldsymbol y - \\boldsymbol B \\boldsymbol c)^\\top (\\boldsymbol y - \\boldsymbol B \\boldsymbol c) + \\lambda \\boldsymbol c^\\top \\boldsymbol R \\boldsymbol c \\] větší váhu penalizačnímu členu, tedy dostaneme více penalizované, více hladké křivky blížící se lineární funkci. Vykreslíme si obrázky, ve kterých bude zřejmé, jak se s měnící se hodnotou \\(\\lambda\\) mění výsledná vyhlazená křivka. Ke znázornění tohoto chování použijeme data phoneme z jedné z předchozích kapitol. Vybereme jedno zajímavé pozorování a ukážeme na něm toto chování. Za uzly bereme celý vektor frekvencí (1 až 256 Hz), standardně uvažujeme kubické spliny, proto volíme (implicitní volba v R) norder = 4. Budeme penalizovat druhou derivaci funkcí. Code t &lt;- 1:256 rangeval &lt;- range(t) breaks &lt;- t norder &lt;- 4 bbasis &lt;- create.bspline.basis(rangeval = rangeval, norder = norder, breaks = breaks) curv.Lfd &lt;- int2Lfd(2) # penalizujeme 2. derivaci # spojeni pozorovani do jedne matice XX &lt;- cbind(X_train, X_test) |&gt; as.matrix() Zvolme nyní nějakých 6 hodnot pro vyhlazovací parametr \\(\\lambda\\) a spočítejme vyhlazené křivky pro jeden vybraný záznam. Code lambdas &lt;- c(0.01, 0.1, 50, 500, 10000, 1000000) # vektor lambd tt &lt;- seq(min(t), max(t), length = 1001) # objekt, do ktereho ulozime hodnoty res_plot &lt;- matrix(NA, ncol = length(lambdas), nrow = length(tt)) for(i in 1:length(lambdas)) { curv.fdPar &lt;- fdPar(bbasis, curv.Lfd, lambdas[i]) BSmooth &lt;- smooth.basis(t, XX, curv.fdPar) XXfd &lt;- BSmooth$fd fdobjSmootheval &lt;- eval.fd(fdobj = XXfd, evalarg = tt)[, 1] res_plot[, i] &lt;- fdobjSmootheval } Code options(scipen = 999) library(scales) lam_labs &lt;- paste0(&#39;Hodnota vyhlazovacího parametru: &#39;, lambdas) names(lam_labs) &lt;- lambdas # tikz(file = &quot;figures/DP_kap2_lambdas.tex&quot;, width = 9, height = 6) data.frame(time = rep(tt, length(lambdas)), value = c(res_plot), lambda = rep(lambdas, each = length(tt))) |&gt; mutate(lambda = factor(lambda)) |&gt; ggplot(aes(x = time, y = value, colour = lambda)) + geom_point(data = data.frame(time = rep(t, length(lambdas)), value = rep(c(data[5, 2:257]) |&gt; unlist(), length(lambdas)), lambda = rep(lambdas, each = length(t))) |&gt; mutate(lambda = factor(lambda)), alpha = 0.5, size = 0.75) + geom_line(linewidth = 0.5) + facet_wrap(~lambda, ncol = 3, nrow = 2, labeller = labeller(lambda = lam_labs)) + theme_bw() + theme(legend.position = &#39;none&#39;) + labs(x = &#39;Frekvence [Hz]&#39;, y = &#39;Log-periodogram&#39;, colour = &#39;Foném&#39;) Obrázek 13.6: Log-periodogram vybraného fonému pro zvolené hodnoty vyhlazovacího parametru. Code # dev.off() # ggsave(&#39;figures/DP_kap2_lambdas.pdf&#39;) 13.2.2 Funkcionální PCA 13.3 Materiály pro Kapitolu 3 13.4 Materiály pro Kapitolu 4 13.5 Materiály pro Kapitolu 5 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
